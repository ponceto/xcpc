        case 0x00: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x01: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x02: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x03: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x04: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x05: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x06: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x07: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x08: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x09: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x0f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x10: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x11: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x12: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x13: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x14: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x15: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x16: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x17: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x18: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x19: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x1f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x20: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x21: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x22: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x23: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x24: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x25: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x26: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x27: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x28: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x29: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x2f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x30: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x31: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x32: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x33: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x34: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x35: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x36: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x37: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x38: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x39: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x3f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x40: /* in b,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(BC_H, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x41: /* out (c),b */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, BC_H);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x42: /* sbc hl,bc */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_sbc_r16_r16(HL_W, BC_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x43: /* ld (nn),bc */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_ind_i16_r16(BC_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x44: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x45: /* retn */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_retn();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x46: /* im 0 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_0();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x47: /* ld i,a */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (9 - 4);
                m_ld_i_a();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x48: /* in c,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(BC_L, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x49: /* out (c),c */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4a: /* adc hl,bc */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_adc_r16_r16(HL_W, BC_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4b: /* ld bc,(nn) */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_r16_ind_i16(BC_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4c: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4d: /* reti */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_reti();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4e: /* im 0/1 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_3();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x4f: /* ld r,a */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (9 - 4);
                m_ld_r_a();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x50: /* in d,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(DE_H, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x51: /* out (c),d */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, DE_H);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x52: /* sbc hl,de */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_sbc_r16_r16(HL_W, DE_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x53: /* ld (nn),de */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_ind_i16_r16(DE_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x54: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x55: /* retn */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_retn();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x56: /* im 1 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_1();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x57: /* ld a,i */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (9 - 4);
                m_ld_a_i();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x58: /* in e,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(DE_L, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x59: /* out (c),e */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, DE_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5a: /* adc hl,de */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_adc_r16_r16(HL_W, DE_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5b: /* ld de,(nn) */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_r16_ind_i16(DE_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5c: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5d: /* reti */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_reti();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5e: /* im 2 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_2();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x5f: /* ld a,r */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (9 - 4);
                m_ld_a_r();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x60: /* in h,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(HL_H, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x61: /* out (c),h */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, HL_H);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x62: /* sbc hl,hl */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_sbc_r16_r16(HL_W, HL_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x63: /* ld (nn),hl */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_ind_i16_r16(HL_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x64: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x65: /* retn */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_retn();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x66: /* im 0 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_0();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x67: /* rrd */
            {
                constexpr uint32_t m_cycles = (5 - 1);
                constexpr uint32_t t_states = (18 - 4);
                m_rrd();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x68: /* in l,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(HL_L, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x69: /* out (c),l */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, HL_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6a: /* adc hl,hl */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_adc_r16_r16(HL_W, HL_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6b: /* ld hl,(nn) */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_r16_ind_i16(HL_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6c: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6d: /* reti */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_reti();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6e: /* im 0/1 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_3();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x6f: /* rld */
            {
                constexpr uint32_t m_cycles = (5 - 1);
                constexpr uint32_t t_states = (18 - 4);
                m_rld();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x70: /* in f,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(AF_L, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x71: /* out (c),f */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, AF_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x72: /* sbc hl,sp */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_sbc_r16_r16(HL_W, SP_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x73: /* ld (nn),sp */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_ind_i16_r16(SP_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x74: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x75: /* retn */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_retn();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x76: /* im 1 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_1();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x77: /* nop */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_nop();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x78: /* in a,(c) */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_in_r08_ind_r08(AF_H, BC_L);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x79: /* out (c),a */
            {
                constexpr uint32_t m_cycles = (3 - 1);
                constexpr uint32_t t_states = (12 - 4);
                m_out_ind_r08_r08(BC_L, AF_H);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7a: /* adc hl,sp */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (15 - 4);
                m_adc_r16_r16(HL_W, SP_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7b: /* ld sp,(nn) */
            {
                constexpr uint32_t m_cycles = (6 - 1);
                constexpr uint32_t t_states = (20 - 4);
                m_ld_r16_ind_i16(SP_W);
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7c: /* neg */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_neg();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7d: /* reti */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (14 - 4);
                m_reti();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7e: /* im 2 */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_im_2();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x7f: /* nop */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_nop();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x80: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x81: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x82: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x83: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x84: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x85: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x86: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x87: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x88: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x89: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x8f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x90: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x91: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x92: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x93: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x94: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x95: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x96: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x97: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x98: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x99: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9a: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9b: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9c: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9d: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9e: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0x9f: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa0: /* ldi */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_ldi();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa1: /* cpi */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_cpi();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa2: /* ini */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_ini();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa3: /* outi */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_outi();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa8: /* ldd */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_ldd();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xa9: /* cpd */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_cpd();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xaa: /* ind */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_ind();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xab: /* outd */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_outd();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xac: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xad: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xae: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xaf: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb0: /* ldir */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_ldir();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb1: /* cpir */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_cpir();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb2: /* inir */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_inir();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb3: /* otir */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_otir();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb8: /* lddr */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_lddr();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xb9: /* cpdr */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_cpdr();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xba: /* indr */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_indr();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xbb: /* otdr */
            {
                constexpr uint32_t m_cycles = (4 - 1);
                constexpr uint32_t t_states = (16 - 4);
                m_otdr();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xbc: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xbd: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xbe: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xbf: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc0: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc1: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc2: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc3: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc8: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xc9: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xca: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xcb: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xcc: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xcd: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xce: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xcf: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd0: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd1: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd2: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd3: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd8: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xd9: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xda: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xdb: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xdc: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xdd: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xde: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xdf: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe0: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe1: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe2: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe3: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe8: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xe9: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xea: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xeb: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xec: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xed: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xee: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xef: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf0: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf1: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf2: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf3: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf4: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf5: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf6: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf7: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf8: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xf9: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xfa: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xfb: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xfc: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xfd: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xfe: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
        case 0xff: /* illegal */
            {
                constexpr uint32_t m_cycles = (2 - 1);
                constexpr uint32_t t_states = (8 - 4);
                m_illegal_ed();
                m_consume(m_cycles, t_states);
            }
            break;
